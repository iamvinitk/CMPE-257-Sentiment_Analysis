# -*- coding: utf-8 -*-
"""257_project_filtereddata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRDyU3qV0dgoucL2KCKwlJVgTo7WgJRL
"""

import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')
from nltk.corpus import stopwords

import pandas as pd
import numpy as np
import re
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import plotly.express as px
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC, SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score

df = pd.read_csv('/content/training1600000.csv',encoding = "ISO-8859-1",header=None)

df.columns = ["polarity",'id','date','query','user','tweet']
df

def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'http\S+',' ',text)
    text = re.sub('[^a-zA-Z]',' ',text)
    text = word_tokenize(text)
    text = [item for item in text if item not in stop_words]
    text = [lemma.lemmatize(w) for w in text]
    text = [i for i in text if len(i)>2]
    text = ' '.join(text)
    return text

stop_words = set(stopwords.words('english'))
lemma = WordNetLemmatizer()

df_new = df.sample(n=100000)

df_new['polarity'].value_counts()

df_new['clean_tweet'] = df_new['tweet'].apply(clean_text)

x_train = df_new['clean_tweet']

from sklearn.feature_extraction.text import CountVectorizer
matrix = CountVectorizer(max_features=1000)
x_train_cv = matrix.fit_transform(x_train).toarray()

model = LinearSVC()

y_train = df_new.polarity

df_test = pd.read_csv('/content/testdata.manual.2009.06.14.csv',header=None)

df_test.columns = ["polarity",'id','date','query','user','tweet']
df_test

df_test['clean_tweet'] = df_test['tweet'].apply(clean_text)

x_test = df_test['clean_tweet']

from sklearn.feature_extraction.text import CountVectorizer
matrix = CountVectorizer(max_features=1000)
x_test_cv = matrix.fit_transform(x_test).toarray()

y_test = df_test['polarity']

model.fit(x_train_cv, y_train)
results = {
    'accuracy': [],
    'f1': []
}
y_pred = model.predict(x_test_cv)
results['accuracy'].append(accuracy_score(y_test, y_pred))
results['f1'].append(f1_score(y_test, y_pred, average=None))

results

df_filtered_test = df_test[df_test['polarity'] != 2]

x_test_filtered = df_filtered_test['clean_tweet']
matrix = CountVectorizer(max_features=1000)
x_test_cv = matrix.fit_transform(x_test_filtered).toarray()

y_filtered_test = df_filtered_test['polarity']

len(y_filtered_test)

model.fit(x_train_cv, y_train)
results_filtered_SVC = {
    'accuracy': [],
    'f1': []
}
y_pred = model.predict(x_test_cv)
results_filtered_SVC['accuracy'].append(accuracy_score(y_filtered_test, y_pred))
results_filtered_SVC['f1'].append(f1_score(y_filtered_test, y_pred, average=None))

results_filtered_SVC

from sklearn.linear_model import SGDClassifier

model2 = SGDClassifier(max_iter=100, tol=10e-3)

model2.fit(x_train_cv, y_train)
results_SGD = {
    'accuracy': [],
    'f1': []
}
y_pred = model.predict(x_test_cv)
results_SGD['accuracy'].append(accuracy_score(y_filtered_test, y_pred))
results_SGD['f1'].append(f1_score(y_filtered_test, y_pred, average=None))

results_SGD