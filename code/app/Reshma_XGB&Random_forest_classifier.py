# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgyNW-vRrLnFcha1KVFNO9lS8hnU1Tb6
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install torchvision
import torch
import torchvision

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 

import re
import nltk
nltk.download('stopwords')
import time
import warnings
warnings.filterwarnings("ignore")
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import LancasterStemmer
from sklearn.utils import shuffle


from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb

train_df = pd.read_csv('/content/train.csv', encoding="ISO-8859-1", header=None)
train_df.columns = ['polarity', 'id', 'date', 'query', 'user', 'tweet']

test_df = pd.read_csv('/content/test.csv', encoding="ISO-8859-1", header=None)
test_df.columns = ['polarity', 'id', 'date', 'query', 'user', 'tweet']

word_bank = []

# Function to remove predefined stopwords to reduce disk usage
def preprocess(text):
    review = re.sub('[^a-zA-Z]',' ',text) 
    review = review.lower()
    review = review.split()
    ps = LancasterStemmer()
    all_stopwords = stopwords.words('english')
    all_stopwords.remove('not')
    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
    return ' '.join(review)

train_df = shuffle(train_df,random_state=2)
train_df = train_df[1:50000]

train_df['polarity'].value_counts()

train_df['polarity'] = train_df['polarity'].replace(4,1)
train_df

test_df

test_df['polarity'] = test_df['polarity'].replace(2,1)
test_df

test_df['polarity'] = test_df['polarity'].replace(4,1)
test_df

X_train = train_df['tweet'].apply(lambda x: preprocess(x))

y_train = train_df['polarity']
le = LabelEncoder()
y = le.fit_transform(y_train)

X_test = test_df['tweet']
y_test = test_df['polarity']

tfidf = TfidfVectorizer(max_features = 100)
X_train_tf = tfidf.fit_transform(X_train).toarray() 
X_test = tfidf.transform(test_data).toarray()

X_train_tf.shape, X_test.shape, y_train.shape, y_test.shape

"""XGB Classifier"""

xg = xgb.XGBClassifier()
start_time = time.time()
xg.fit(X_train_tf, y_train)  
print("Execution Time:", time.time()-start_time,"secs")

"""Random Forest Classifier"""

rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
start_time = time.time()
rf.fit(X_train_tf, y_train)
print("Execution Time:", time.time()-start_time,"secs")

